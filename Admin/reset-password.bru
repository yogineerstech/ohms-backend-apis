meta {
  name: reset-password
  type: http
  seq: 4
}

post {
  url: http://localhost:3000/api/v1/super-admin/reset-password
  body: json
  auth: inherit
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "email": "admin@yogineerstech.in",
    "resetToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQHlvZ2luZWVyc3RlY2guaW4iLCJwdXJwb3NlIjoicGFzc3dvcmRfcmVzZXQiLCJ1c2VySWQiOiJjbWZmMzZub3IwMDAwbGhrMDFnOWtmcGFwIiwiaWF0IjoxNzU3NTc4NDQ0LCJleHAiOjE3NTc1NzkzNDR9.5T3ocu6Ehk7Gz0zuT3JuZXAXZTaEqKGtzRj4K6OHFyA",
    "newPassword": "Ankush@123",
    "confirmPassword": "Ankush@123"
  }
}

tests {
  test("Status should be 200 for successful reset", function() {
    if (res.getBody().message && res.getBody().message.includes("reset successful")) {
      expect(res.getStatus()).to.equal(200);
      expect(res.getBody().timestamp).to.be.a('string');
    }
  });
  
  test("Should reject invalid reset token", function() {
    if (res.getStatus() === 401) {
      expect(res.getBody().error).to.include("Invalid or expired reset token");
      expect(res.getBody().code).to.equal("INVALID_TOKEN");
    }
  });
  
  test("Should reject weak passwords", function() {
    // This test would need a separate request with weak password
    if (res.getStatus() === 400 && res.getBody().details) {
      expect(res.getBody().details.some(detail => 
        detail.message.includes("Password must contain")
      )).to.be.true;
    }
  });
  
  test("Should reject password confirmation mismatch", function() {
    if (res.getStatus() === 400 && res.getBody().details) {
      expect(res.getBody().details.some(detail => 
        detail.message.includes("confirmation does not match")
      )).to.be.true;
    }
  });
}

settings {
  encodeUrl: true
}
