meta {
  name: password-reset-flow (Complete Flow)
  type: http
  seq: 6
}

post {
  url: http://localhost:3000/api/v1/super-admin/reset-password
  body: json
  auth: inherit
}

body:json {
  {
    "email": "admin@eyehospital.com",
    "resetToken": "{{resetToken}}",
    "newPassword": "NewSecureAdmin@2025",
    "confirmPassword": "NewSecureAdmin@2025"
  }
}

headers {
  Content-Type: application/json
}

vars:pre-request {
  // In a real scenario, you would get this token from the forgot-password response
  // or from the email link that was sent to the user
  resetToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFkbWluQGV5ZWhvc3BpdGFsLmNvbSIsInB1cnBvc2UiOiJwYXNzd29yZF9yZXNldCIsImlhdCI6MTcyNjA1MDAwMCwiZXhwIjoxNzI2MDUzNjAwfQ.example_token_signature
}

tests {
  test("Complete Password Reset Flow Test", function() {
    expect(res.getStatus()).to.equal(200);
    expect(res.getBody().message).to.include("reset successful");
    expect(res.getBody().timestamp).to.be.a('string');
  });
  
  test("Token Validation Error Handling", function() {
    if (res.getStatus() === 401) {
      expect(res.getBody().error).to.include("Invalid or expired reset token");
      expect(res.getBody().code).to.equal("INVALID_TOKEN");
    }
  });
  
  test("Email Mismatch Error Handling", function() {
    if (res.getStatus() === 401 && res.getBody().error.includes("Invalid reset token")) {
      expect(res.getBody().code).to.equal("INVALID_TOKEN");
    }
  });
  
  test("Password Validation", function() {
    if (res.getStatus() === 400 && res.getBody().details) {
      // Check for password validation errors
      const hasPasswordError = res.getBody().details.some(detail => 
        detail.path.includes("newPassword") || 
        detail.message.includes("Password must contain")
      );
      expect(hasPasswordError).to.be.true;
    }
  });
  
  test("Same Password Prevention", function() {
    if (res.getStatus() === 400 && res.getBody().error.includes("different from your current password")) {
      expect(res.getBody().error).to.include("New password must be different");
    }
  });
}

settings {
  encodeUrl: true
}

docs {
  # Password Reset Flow Documentation
  
  ## Overview
  This demonstrates the simplified password reset flow that uses JWT tokens instead of OTP verification.
  
  ## Flow Steps:
  1. **Forgot Password**: POST `/forgot-password` with email
     - Returns: `{message, resetToken, expiryMinutes}`
     - Token is also sent via email link
  
  2. **Reset Password**: POST `/reset-password` with email, resetToken, and new passwords
     - Returns: `{message, timestamp}` on success
  
  ## Key Changes:
  - No longer requires OTP entry by user
  - Uses JWT token for verification
  - Token is valid for 60 minutes
  - More secure and user-friendly
  
  ## Security Features:
  - JWT token includes email, purpose, and expiration
  - Token signature prevents tampering
  - Email validation ensures token belongs to correct user
  - Password complexity validation
  - Prevention of reusing current password
  
  ## Error Codes:
  - `INVALID_TOKEN` (401): Token expired, invalid, or tampered
  - `400`: Validation errors (password, email mismatch, etc.)
  - `404`: Account not found or deactivated
}
